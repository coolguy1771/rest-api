// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Tyler Witlin"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/unit/{id}": {
            "get": {
                "description": "GetUnit returns a single unit by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Get unit by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "unit id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Unit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/units": {
            "get": {
                "description": "Get all units stored in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "List all units",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the page to be retrieved",
                        "name": "page_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrderList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "PutUnit writes an unit to the database\nTo write a new unit, leave the id empty. To update an existing one, use the id of the unit to be updated",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Units"
                ],
                "summary": "Add an unit to the database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Unit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users stored in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the page to be retrieved",
                        "name": "page_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "PutUser writes an user to the database\nTo write a new user, leave the id empty. To update an existing one, use the id of the user to be updated",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Add an user to the database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user discord",
                        "name": "discord",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "GetUser returns a single user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "application-specific error code",
                    "type": "integer",
                    "example": 404
                },
                "error": {
                    "description": "application-level error message, for debugging",
                    "type": "string",
                    "example": "The requested resource was not found on the server"
                },
                "status": {
                    "description": "user-level status message",
                    "type": "string",
                    "example": "Resource not found."
                }
            }
        },
        "OrderList": {
            "type": "object",
            "properties": {
                "next_page_id": {
                    "description": "The id to query the next page",
                    "type": "integer",
                    "example": 10
                },
                "units": {
                    "description": "A list of units",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Unit"
                    }
                }
            }
        },
        "Unit": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique id of this unit",
                    "type": "integer",
                    "example": 1
                },
                "lastUpdated": {
                    "type": "string",
                    "example": "0001-01-01 00:00:00+00"
                },
                "name": {
                    "description": "DateTime is the date and time of this unit",
                    "type": "string",
                    "example": "Black Element"
                },
                "owner": {
                    "type": "string"
                },
                "updatedBy": {
                    "type": "string"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "discord": {
                    "description": "The price of this item",
                    "type": "string",
                    "example": "12345678"
                },
                "id": {
                    "description": "The unique id of this item",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "The name of this item",
                    "type": "string",
                    "example": "Frosty Sigh"
                }
            }
        },
        "UserList": {
            "type": "object",
            "properties": {
                "next_page_id": {
                    "description": "The id to query the next page",
                    "type": "integer",
                    "example": 10
                },
                "users": {
                    "description": "A list of users",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "REST API Written in go",
	Description: "This API is designed for Black Element's PERSCOM Project",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
