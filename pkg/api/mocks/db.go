// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coolguy1771/rest-api/pkg/db (interfaces: ClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/coolguy1771/rest-api/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockClientInterface) Connect(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockClientInterfaceMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientInterface)(nil).Connect), arg0)
}

// GetUserByID mocks base method
func (m *MockClientInterface) GetUserByID(arg0 int) *types.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*types.User)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockClientInterfaceMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockClientInterface)(nil).GetUserByID), arg0)
}

// GetUsers mocks base method
func (m *MockClientInterface) GetUsers(arg0 int) *types.UserList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].(*types.UserList)
	return ret0
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockClientInterfaceMockRecorder) GetUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClientInterface)(nil).GetUsers), arg0)
}

// GetOrderByID mocks base method
func (m *MockClientInterface) GetUnitByID(arg0 int) *types.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(*types.Unit)
	return ret0
}

// GetOrderByID indicates an expected call of GetOrderByID
func (mr *MockClientInterfaceMockRecorder) GetUnitByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitByID", reflect.TypeOf((*MockClientInterface)(nil).GetUnitByID), arg0)
}

// GetOrders mocks base method
func (m *MockClientInterface) GetUnits(arg0 int) *types.UnitList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnits", arg0)
	ret0, _ := ret[0].(*types.UnitList)
	return ret0
}

// GetOrders indicates an expected call of GetOrders
func (mr *MockClientInterfaceMockRecorder) GetUnits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockClientInterface)(nil).GetUnits), arg0)
}

// Ping mocks base method
func (m *MockClientInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockClientInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClientInterface)(nil).Ping))
}

// SetUser mocks base method
func (m *MockClientInterface) SetUser(arg0 *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUser indicates an expected call of SetUser
func (mr *MockClientInterfaceMockRecorder) SetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockClientInterface)(nil).SetUser), arg0)
}

// SetUnit mocks base method
func (m *MockClientInterface) SetUnit(arg0 *types.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnit indicates an expected call of SetUnit
func (mr *MockClientInterfaceMockRecorder) SetUnit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnit", reflect.TypeOf((*MockClientInterface)(nil).SetUnit), arg0)
}
